name: school-management CI/CD to Heroku

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: school_management_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, pgsql, pdo_pgsql
        coverage: xdebug

    - name: Create .env file
      run: |
        echo "APP_NAME=\"School Management API\"" > .env
        echo "APP_ENV=testing" >> .env
        echo "APP_KEY=" >> .env
        echo "APP_DEBUG=true" >> .env
        echo "APP_URL=http://localhost" >> .env
        echo "LOG_CHANNEL=stack" >> .env
        echo "DB_CONNECTION=pgsql" >> .env
        echo "DB_HOST=127.0.0.1" >> .env
        echo "DB_PORT=5432" >> .env
        echo "DB_DATABASE=school_management_test" >> .env
        echo "DB_USERNAME=postgres" >> .env
        echo "DB_PASSWORD=password" >> .env

    - name: Update Dependencies
      run: composer update --no-ansi --no-interaction --prefer-dist

    - name: Generate key
      run: php artisan key:generate

    - name: Set Directory Permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Configure Database
      run: |
        php artisan config:clear
        php artisan migrate --force
      env:
        DB_CONNECTION: pgsql
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
        DB_DATABASE: school_management_test
        DB_USERNAME: postgres
        DB_PASSWORD: password

    - name: Run Tests
      run: vendor/bin/phpunit
      env:
        DB_CONNECTION: pgsql
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
        DB_DATABASE: school_management_test
        DB_USERNAME: postgres
        DB_PASSWORD: password

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'

    - name: Install Composer Dependencies
      run: composer install --no-dev --optimize-autoloader --no-interaction

    # Create Heroku app if it doesn't exist yet
    - name: Install Heroku CLI
      run: curl https://cli-assets.heroku.com/install.sh | sh

    - name: Check if Heroku app exists
      id: check_app
      run: |
        if heroku apps:info "${{ secrets.HEROKU_APP_NAME }}" --json >/dev/null 2>&1; then
          echo "app_exists=true" >> $GITHUB_OUTPUT
        else
          echo "app_exists=false" >> $GITHUB_OUTPUT
        fi
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

    - name: Create Heroku app if needed
      if: steps.check_app.outputs.app_exists == 'false'
      run: heroku apps:create ${{ secrets.HEROKU_APP_NAME }} --buildpack heroku/php --stack heroku-22
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

    - name: Deploy to Heroku
      uses: akhileshns/heroku-deploy@v3.12.13
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        justlogin: false
        usedocker: false
        docker_heroku_process_type: web
        dontautocreate: true # Don't try to auto-create the app

    # Post-deployment configuration
    - name: Set up Laravel on Heroku
      run: |
        # Generate APP_KEY if not set
        if ! heroku config:get APP_KEY --app ${{ secrets.HEROKU_APP_NAME }} | grep -q "base64"; then
          echo "Setting APP_KEY..."
          heroku config:set APP_KEY=$(php artisan key:generate --show) --app ${{ secrets.HEROKU_APP_NAME }}
        else
          echo "APP_KEY already set"
        fi

        # Set essential Laravel configs !
        heroku config:set APP_ENV=production --app ${{ secrets.HEROKU_APP_NAME }}
        heroku config:set LOG_CHANNEL=errorlog --app ${{ secrets.HEROKU_APP_NAME }}

        # Run migrations
        heroku run "php artisan migrate --force" --app ${{ secrets.HEROKU_APP_NAME }}

        # Generate Swagger documentation
        heroku run "php artisan l5-swagger:generate" --app ${{ secrets.HEROKU_APP_NAME }}

        # Set proper permissions and links
        heroku run "php artisan storage:link" --app ${{ secrets.HEROKU_APP_NAME }} || true
        heroku run "chmod -R 775 storage bootstrap/cache" --app ${{ secrets.HEROKU_APP_NAME }}

        # Clear caches
        heroku run "php artisan config:clear" --app ${{ secrets.HEROKU_APP_NAME }}
        heroku run "php artisan cache:clear" --app ${{ secrets.HEROKU_APP_NAME }}
        heroku run "php artisan view:clear" --app ${{ secrets.HEROKU_APP_NAME }}
        heroku run "php artisan route:clear" --app ${{ secrets.HEROKU_APP_NAME }}
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
